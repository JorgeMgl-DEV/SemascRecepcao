rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isLoggedIn() {
      return request.auth != null;
    }

    // Admin identificado por e-mail
    function isAdmin() {
      return isLoggedIn() && request.auth.token.email == "admin@prefeitura.local";
    }

    // Recepção identificado por e-mail
    function isReception() {
      return isLoggedIn() && request.auth.token.email == "recepcao@prefeitura.local";
    }

    match /atendimentos/{id} {

      // ADMIN: full acesso
      allow read, write, delete: if isAdmin();

      // RECEPÇÃO: criar sempre (com campos esperados)
      allow create: if isReception()
        && request.resource.data.keys().hasOnly([
          'nome','cpf','servico','createdAt','updatedAt','diaKey','criadoPor'
        ])
        && request.resource.data.nome is string
        && request.resource.data.cpf is string
        && request.resource.data.servico is string
        && request.resource.data.diaKey is string
        && request.resource.data.criadoPor == request.auth.uid;

      // RECEPÇÃO: ler somente documentos criados por ela e até 36h após criação
      allow read: if isReception()
        && resource.data.criadoPor == request.auth.uid
        && resource.data.createdAt != null
        && request.time < resource.data.createdAt + duration.value(36, 'hours');

      // RECEPÇÃO: atualizar apenas nome/cpf/servico (até 36h, e sendo autora)
      allow update: if isReception()
        && resource.data.criadoPor == request.auth.uid
        && resource.data.createdAt != null
        && request.time < resource.data.createdAt + duration.value(36, 'hours')
        && request.resource.data.diff(resource.data).changedKeys()
            .hasOnly(['nome','cpf','servico','updatedAt']);

      // RECEPÇÃO: não pode deletar
      allow delete: if false;
    }

    // Bloqueia tudo que não for explicitamente permitido
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
